#include <stdio.h>
#include <stdint.h>
#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"

volatile uint8_t G_DataID;
volatile int32_t G_DataValue;

QueueHandle_t Queue1;

typedef struct {
    uint8_t dataID;
    int32_t DataValue;
} Data_t;

TaskHandle_t TaskHandle_1;
TaskHandle_t TaskHandle_2;

void ExampleTask1(void *pV);
void ExampleTask2(void *pV);

void ExampleTask1(void *pV) {
    Data_t data;
    const TickType_t xDelay = pdMS_TO_TICKS(500);

    while (1) {
        data.dataID = G_DataID;
        data.DataValue = G_DataValue;

        if (xQueueSend(Queue1, &data, portMAX_DELAY) != pdPASS) {
            printf("Failed to send to queue.\n");
        }

        vTaskDelay(xDelay);
    }
}

void ExampleTask2(void *pV) {
    Data_t data;
    UBaseType_t initialPriority = uxTaskPriorityGet(NULL);

    while (1) {
        if (xQueueReceive(Queue1, &data, portMAX_DELAY) == pdPASS) {
            printf("Received data: dataID = %d, DataValue = %d\n", data.dataID, data.DataValue);
            
            switch (data.dataID) {
                case 0:
                    vTaskDelete(NULL);
                    break;

                case 1:
                    if (data.DataValue == 0) {
                        vTaskPrioritySet(NULL, initialPriority + 2);
                    } else if (data.DataValue == 1) {
                        if (uxTaskPriorityGet(NULL) > initialPriority) {
                            vTaskPrioritySet(NULL, initialPriority);
                        }
                    } else if (data.DataValue == 2) {
                        vTaskDelete(NULL);
                    }
                    break;

                default:
                    break;
            }
        }
    }
}

int main() {
    G_DataID = 0;
    G_DataValue = 0;

    Queue1 = xQueueCreate(5, sizeof(Data_t));
    if (Queue1 == NULL) {
        printf("Failed to create queue.\n");
        return 1;
    }

    BaseType_t task1Created = xTaskCreate(ExampleTask1, "ExampleTask1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &TaskHandle_1);
    BaseType_t task2Created = xTaskCreate(ExampleTask2, "ExampleTask2", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &TaskHandle_2);

    if (task1Created != pdPASS || task2Created != pdPASS) {
        printf("Failed to create tasks.\n");
        return 1;
    }

    vTaskStartScheduler();
   for (;;);
    return 0;
}
